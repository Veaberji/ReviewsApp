<head>
    <link href="~/lib/jqueryui/themes/blitzer/jquery-ui.min.css" rel="Stylesheet" type="text/css" />
</head>

<script type="text/javascript">
    $(function () {
        restrictTagInput();
        fillTags();
    });
    $(function () {
        $("#TagText").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/Review/AutoCompleteTag/',
                    headers: { "RequestVerificationToken":
                        $('input[name="__RequestVerificationToken"]').val() },
                    data: { "prefix": $.trim(request.term)},
                    type: "POST",
                    success: function (data) {
                        response($.map(data, function (item) {
                            return item;
                        }));
                    },
                    error: function (errorResponse) {
                        console.log(errorResponse.responseText);
                    },
                    failure: function (failureResponse) {
                        console.log(failureResponse.responseText);
                    }
                });
            },
            minLength: 2
        });
    });
</script>
<script type="text/javascript">
    const maxTagsInReview = @TagConstrains.MaxTagsInReview;
    const tagsResultSeparator = '@TagViewModelConstrains.TagsSeparator';
    let tagsEntered = 0;
    document.getElementById("TagText")
        .addEventListener("keypress", function (event) {
            if (event.keyCode === 13) {
                event.preventDefault();
                let inputTagText = getValueById("TagText");
                setTag(inputTagText);
                addTagToResult(inputTagText);
                clearAutoCompleteTagInput();
            }
        });
    for (let i = 1; i <= maxTagsInReview; i++) {
        document.getElementById(`Tag${i}btn`)
            .addEventListener("click", function (event) {
                event.preventDefault();
                removeTagFromResult(i);
                hideTagDiv(i);
                clearTagInput(i);
                enableInput(getAutoCompleteTagTextElement());
                tagsEntered--;
            });
    }

    function setTag(inputTagText) {
        for (let i = 1; i <= maxTagsInReview; i++) {
            let tagTextElement = getTagTextElement(i);
            if (tagTextElement.value.trim().length === 0) {
                tagTextElement.value = inputTagText;
                showTagDiv(i);

                tagsEntered++;
                if (tagsEntered === maxTagsInReview) {
                    disableInput(getAutoCompleteTagTextElement());
                }
                break;
            }
        }
    }

    function restrictTagInput() {
        getAutoCompleteTagTextElement().addEventListener("keypress", function (event) {
            if (!String.fromCharCode(event.keyCode).match(/[a-zA-Z0-9-]/g)) {
                event.preventDefault();
            }
        });
    }

    function fillTags() {
        let tagsResult = getTagsResultElement().value;
        if (tagsResult.length > 0) {
            let tags = tagsResult.split("@TagViewModelConstrains.TagsSeparator");
            tags.forEach(tag => setTag(tag));
        }
    }

    function addTagToResult(tagText) {
        let result = getTagsResultElement();
        if (result.value.length > 0) {
            result.value += tagsResultSeparator;
        }
        result.value += tagText;
    }

    function removeTagFromResult(i) {
        let result = getTagsResultElement();
        let text = getTagTextElement(i).value;
        let partToDelete;
        if (isOnlyOneTag(text, result)) {
            partToDelete = text;
        } else if (isFirstsTag(text, result)) {
            partToDelete = `${text}${tagsResultSeparator}`;
        }
        else {
            partToDelete = `${tagsResultSeparator}${text}`;
        }

        let newText = result.value.replace(partToDelete, "");
        result.value = newText;
    }

    function isOnlyOneTag(text, result) {
        return isFirstsTag(text, result) && !result.value.includes(tagsResultSeparator);
    }

    function isFirstsTag(text, result) {
        return result.value.startsWith(text);
    }

    function showTagDiv(i) {
        getDivForTag(i).hidden = false;
    }

    function hideTagDiv(i) {
        getDivForTag(i).hidden = true;
    }

    function getDivForTag(i) {
        return  getElementById(`Tag${i}`);
    }

    function disableInput(element) {
        element.disabled = true;
    }

    function enableInput(element) {
        element.disabled = false;
    }

    function clearAutoCompleteTagInput() {
        getAutoCompleteTagTextElement().value = "";
    }

    function getAutoCompleteTagTextElement() {
        return getElementById("TagText");
    }

    function clearTagInput(i) {
        getTagTextElement(i).value = "";
    }

    function getTagsResultElement() {
        return getElementById("Tags");
    }

    function getTagTextElement(i) {
        return getElementById(`Tag${i}-Text`);
    }

    function getElementById(id) {
        return document.getElementById(id);
    }

    function getValueById(id) {
        return getElementById(id).value;
    }
</script>